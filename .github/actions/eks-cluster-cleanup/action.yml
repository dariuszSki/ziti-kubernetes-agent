name: 'EKS Cluster Cleanup'
description: 'Delete an EKS cluster with retries'
inputs:
  cluster-name:
    description: 'Name of the cluster to delete'
    required: true
  region:
    description: 'AWS region'
    required: true
  role-to-assume:
    description: 'AWS role to assume'
    required: true

runs:
  using: composite
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: GitHubActions
        audience: sts.amazonaws.com

    - name: install aws eksctl
      shell: bash
      run: |
        set -o pipefail
        set -o xtrace

        curl --silent --show-error --fail --location \
          https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz \
        | tar xz -C /tmp
        sudo install /tmp/eksctl /usr/local/bin/

    - name: delete-eks-cluster
      shell: bash
      run: |
        set -o pipefail
        set -o xtrace

        # Function to get cluster status
        get_cluster_status() {
          aws eks describe-cluster \
            --name "${{ inputs.cluster-name }}" \
            --region "${{ inputs.region }}" \
            --query 'cluster.status' \
            --output text 2>/dev/null || echo "NOT_FOUND"
        }

        # Try to delete cluster with exponential backoff
        MAX_ATTEMPTS=10
        ATTEMPT=1
        DELAY=15  # Initial delay in seconds

        while [[ $ATTEMPT -le $MAX_ATTEMPTS ]]; do
          STATUS=$(get_cluster_status)
          
          if [[ "$STATUS" == "NOT_FOUND" ]]; then
            echo "Cluster does not exist, nothing to delete"
            exit 0
          fi
          
          echo "Attempt $ATTEMPT: Cluster status is $STATUS"
          
          # Try to delete the cluster
          if eksctl delete cluster \
              --name "${{ inputs.cluster-name }}" \
              --region "${{ inputs.region }}" \
              --force \
              --disable-nodegroup-eviction \
              2>&1 | tee /tmp/eksctl_delete.log; then
            echo "Cluster deletion initiated successfully"
            break
          fi
          
          # Check for specific error conditions
          if grep -q "try again later\|ResourceInUseException\|cluster is currently being\|InvalidParameterException" /tmp/eksctl_delete.log; then
            echo "Received retryable error, waiting before next attempt..."
            sleep $DELAY
            ATTEMPT=$((ATTEMPT + 1))
            DELAY=$((DELAY * 2))  # Exponential backoff
            continue
          fi
          
          # If we get here, it's an unhandled error
          echo "Unhandled error during cluster deletion"
          cat /tmp/eksctl_delete.log
          exit 1
        done

        if [[ $ATTEMPT -gt $MAX_ATTEMPTS ]]; then
          echo "Failed to delete cluster after $MAX_ATTEMPTS attempts"
          exit 1
        fi

        # Verify cluster is actually gone
        VERIFY_ATTEMPTS=6
        VERIFY_DELAY=30
        for ((i=1; i<=VERIFY_ATTEMPTS; i++)); do
          STATUS=$(get_cluster_status)
          if [[ "$STATUS" == "NOT_FOUND" ]]; then
            echo "Verified cluster deletion"
            exit 0
          fi
          echo "Cluster still exists with status $STATUS, waiting ${VERIFY_DELAY}s... ($i/$VERIFY_ATTEMPTS)"
          sleep $VERIFY_DELAY
        done

        echo "Warning: Cluster deletion initiated but cluster still exists after verification period"
        exit 1
