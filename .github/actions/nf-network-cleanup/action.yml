name: NetFoundry Network Cleanup
description: Delete a NetFoundry network
inputs:
  network_name:
    description: Name of the network to delete
    required: true
  client_id:
    description: NetFoundry API client ID
    required: true
  client_secret:
    description: NetFoundry API client secret
    required: true

runs:
  using: composite
  steps:
    - name: delete-nf-network
      shell: bash
      run: |
        set -o pipefail

        set +o xtrace  # mask the oauth access token
        OAUTH_RESP="$(
          curl --silent --fail --location --request POST \
            https://netfoundry-production-xfjiye.auth.us-east-1.amazoncognito.com/oauth2/token \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --user "${{ inputs.client_id }}:${{ inputs.client_secret }}" \
            --data-urlencode 'grant_type=client_credentials'
        )"
        if [[ -z "$OAUTH_RESP" ]]; then
          echo "ERROR: OAUTH_RESP is empty" >&2
          exit 1
        fi
        ACCESS_TOKEN="$(echo $OAUTH_RESP | jq -r .access_token)"
        if [[ -z "$ACCESS_TOKEN" ]]; then
          echo "ERROR: ACCESS_TOKEN is empty" >&2
          exit 1
        fi
        echo "::add-mask::$ACCESS_TOKEN"
        set -o xtrace

        # get network ID
        NF_NETWORK_LIST="$(curl --silent --fail --location --request GET \
            https://gateway.production.netfoundry.io/core/v3/networks \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer $ACCESS_TOKEN"
        )"
        if [[ -z "$NF_NETWORK_LIST" ]]; then
            echo "ERROR: NF_NETWORK_LIST is empty" >&2
            exit 1
        fi
        NF_NETWORK_ID="$(echo "$NF_NETWORK_LIST" | jq -r \
            --arg nf_network_name "${{ inputs.network_name }}" \
            '._embedded.networkList[] | select(.name==$nf_network_name).id'
        )"

        # delete network if exists
        if [[ -n "$NF_NETWORK_ID" ]]; then
            NF_NETWORK_DELETE_RESP="$(curl --silent --fail --location --request DELETE \
                "https://gateway.production.netfoundry.io/core/v3/networks/$NF_NETWORK_ID" \
                --header 'Content-Type: application/json' \
                --header "Authorization: Bearer $ACCESS_TOKEN"
            )"
            if [[ -z "$NF_NETWORK_DELETE_RESP" ]]; then
                echo "ERROR: NF_NETWORK_DELETE_RESP is empty" >&2
                exit 1
            fi
            NF_NETWORK_STATUS="$(echo "$NF_NETWORK_DELETE_RESP" | jq -r .status)"
            if [[ -z "$NF_NETWORK_STATUS" ]]; then
                echo "ERROR: NF_NETWORK_STATUS is empty" >&2
                exit 1
            elif [[ "$NF_NETWORK_STATUS" == "DELETED" ]]; then
                echo "INFO: network ${{ inputs.network_name }} deleted"
                exit 0
            elif [[ "$NF_NETWORK_STATUS" == "DELETING" ]]; then
                echo "INFO: network ${{ inputs.network_name }} is being deleted"
                exit 0
            fi
        else
            echo "INFO: network ${{ inputs.network_name }} does not exist"
            exit 1
        fi
